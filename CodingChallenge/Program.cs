using System;
using System.Collections.Generic;

namespace CodingChallenge
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var testString = "1118313623545511731349577584178497168771887163382271218699926529721" +
                       "5465163229667646428526117162589288859873872192535747924948688637527" +
                       "9741651224686642647267979445939836673253446489428761486828844713816" +
                       "1984148527699424597669219287355918927236198459831172835757626947582" +
                       "2395626258355667537953347945896415246197332143276885816581854948422" +
                       "9241869657725166769662249574889435227698271439423511175653875622976" +
                       "1217493447567346582482452122732421154889618187198282589366532363519" +
                       "2429225182135238947197164195794159314115998269639622821846185575255" +
                       "5358856127582128823657548151545741663495182446281491763249374581774" +
                       "4262258224741123387456291942139763287629858841273244439841635717119" +
                       "4111398682616892118756786128826874466314286786616554679562146613433" +
                       "3541274633769865956692539151971953651886381195877638919355216642731" +
                       "8486596492632172585994566466354126234611387929458545361549767321674" +
                       "3935554896577831326482423717615219661433374891971142218814868729975" +
                       "7751955297978137561935963366682742334867854892581388263132968999722" +
                       "3664953468548283168423528298279894193935948468938427461492356819219" +
                       "5147613258519926536683625732212168147187718784721971232593371414915" +
                       "1568922456111149524629995933156924418468567649494728828858254296824" +
                       "3729292119774467296911439953338747524483156321852863486572933953394" +
                       "7525679659196871748761589695997641363742253656327353797284178338635" +
                       "8764761364989261322293887361558128521915542454126546182855197637753" +
                       "1153525415789722987155223866839147779677295622293959365932722696612" +
                       "9529522311318668359467853351178318742219362623457384988118584962638" +
                       "9774394351115527451886962844431947188429195191724662982411619815811" +
                       "6527417337448644116667661339519545953448371796356681778459375785751" +
                       "1716887575418152358444269938416711131787513817956793917458991789459" +
                       "7492816476662186746837552978671142265114426813792549412632291424594" +
                       "2393918533589146433275491921654666287376145814581897325798149194687" +
                       "9549341576251737222786261422491184474471169855732445421112357132722" +
                       "4554259626961741919243229688684838813912553397698937237114287944446" +
                       "7229191987431898484283993568426261986352978512748791283223581955852" +
                       "84984366515428245928111112613638341345371";

            var test = "11";
//            var result = AddSequentialNumberCharactersProcedurally(testString);
            var result = AddMatchesAtHalfLengthStep(test);
            
            Console.WriteLine($"The sum of all sequential characters is: {result}");
        }

        public static int AddSequentialNumberCharactersProcedurally(string str)
        {
            var sum = 0;
            
            for (var index = 0; index < str.Length - 1; index++)
            {
                if (str[index] == str[index + 1])
                {
                    var success = int.TryParse(str[index].ToString(), out var number);
                    sum += success ? number : 0;
                }
            }

            if (str[0] == str[str.Length - 1])
            {
                var success = int.TryParse(str[0].ToString(), out var number);
                sum += success ? number : 0;
            }

            return sum;
        }

        public static int AddMatchesAtHalfLengthStep(string str)
        {
            var sum = 0;
            var step = str.Length / 2;

            for (var index = 0; index < str.Length; index++)
            {
                var target = (index + step) % str.Length;
                
                if (str[index] == str[target])
                {
                    var success = int.TryParse(str[index].ToString(), out var number);
                    sum += success ? number : 0;
                }
            }
            
            return sum;
        }
    }
}